name: PM33 Development Coordination - Copy Pattern Framework
on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]

jobs:
  enforce-separation-rules:
    name: üîí Enforce Core App vs Marketing Website Separation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for Marketing Website File Modifications
        run: |
          echo "üîç Checking for forbidden marketing website modifications..."
          
          # Define forbidden paths for core app repository
          FORBIDDEN_MARKETING_PATHS=(
            "marketing-website/"
            "app/frontend/marketing-website/"
            "app/frontend/pm33-marketing-website/"
          )
          
          # Get changed files in this PR/push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "üìù Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for forbidden modifications
          VIOLATIONS_FOUND=false
          
          for file in $CHANGED_FILES; do
            for forbidden_path in "${FORBIDDEN_MARKETING_PATHS[@]}"; do
              if [[ "$file" == "$forbidden_path"* ]]; then
                echo "‚ùå VIOLATION: Attempted to modify forbidden marketing file: $file"
                echo "üîí RULE: Core app agents may only READ marketing files for reference"
                echo "‚úÖ SOLUTION: Use copy pattern instead:"
                echo "   1. Copy: $file"
                echo "   2. To: app/frontend/components/core/[ComponentName].tsx"
                echo "   3. Adapt: Use PM33 theme tokens and glass morphism"
                VIOLATIONS_FOUND=true
              fi
            done
          done
          
          if [ "$VIOLATIONS_FOUND" = true ]; then
            echo ""
            echo "üö´ SEPARATION VIOLATION DETECTED"
            echo "üìö Reference: CLAUDE.md section 'Core App vs Marketing Website Separation'"
            echo ""
            echo "üîí CRITICAL AGENT ACCESS RULES:"
            echo "1. READ-ONLY ACCESS: Core app agents may ONLY READ marketing website pages for reference"
            echo "2. NO MODIFICATION: Core app agents are FORBIDDEN from modifying any marketing website files"  
            echo "3. COPY PATTERN: If agents need marketing website functionality:"
            echo "   - Copy the marketing file to the core app directory structure"
            echo "   - Create new core app versions in appropriate components/, pages/, or lib/ directories"
            echo "   - Adapt the copied code for core app architecture and theme system"
            echo ""
            echo "‚ùå This PR violates separation rules and cannot be merged."
            exit 1
          else
            echo "‚úÖ No separation rule violations found"
          fi

  validate-copy-pattern:
    name: üìã Validate Copy Pattern Implementation
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.body, 'COPY PATTERN') || contains(github.event.commits[0].message, 'copy pattern')
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Copy Pattern Documentation
        run: |
          echo "üìã Validating copy pattern implementation..."
          
          # Check if PR properly documents the copy pattern
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_BODY="${{ github.event.pull_request.body }}"
            
            if echo "$PR_BODY" | grep -q "Original file:"; then
              echo "‚úÖ Original file documented"
            else
              echo "‚ö†Ô∏è Missing original file documentation"
            fi
            
            if echo "$PR_BODY" | grep -q "Copied to:"; then
              echo "‚úÖ Copy destination documented"
            else
              echo "‚ö†Ô∏è Missing copy destination documentation"
            fi
            
            if echo "$PR_BODY" | grep -q "Adaptations:"; then
              echo "‚úÖ Adaptations documented"
            else
              echo "‚ö†Ô∏è Missing adaptations documentation"
            fi
          fi
          
      - name: Verify Core App Theme Integration
        run: |
          echo "üé® Checking core app theme integration..."
          
          # Look for proper CSS design token usage
          if grep -r "var(--pm33-" app/frontend/components/core/ --include="*.tsx" --include="*.css"; then
            echo "‚úÖ CSS design tokens being used"
          else
            echo "‚ö†Ô∏è Consider using PM33 CSS design tokens"
          fi
          
          # Look for theme awareness
          if grep -r "theme.*dark\|light" app/frontend/components/core/ --include="*.tsx"; then
            echo "‚úÖ Theme awareness implemented"
          else
            echo "‚ö†Ô∏è Consider implementing theme awareness"
          fi
          
          # Look for glass morphism
          if grep -r "glass\|backdrop.*blur\|rgba.*0\." app/frontend/components/core/ --include="*.tsx" --include="*.css"; then
            echo "‚úÖ Glass morphism effects detected"
          else
            echo "‚ö†Ô∏è Consider implementing glass morphism for cards"
          fi

  check-architecture-compliance:
    name: üèóÔ∏è Architecture Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Core App Architecture
        run: |
          echo "üèóÔ∏è Checking core app architecture compliance..."
          
          # Check for proper directory structure
          REQUIRED_CORE_DIRS=(
            "app/frontend/components/core"
            "app/frontend/components/shared" 
            "app/frontend/components/ui"
            "app/backend/services"
            "app/backend/routes"
            "database"
            "tests/multi_tenancy"
          )
          
          for dir in "${REQUIRED_CORE_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Core directory exists: $dir"
            else
              echo "‚ö†Ô∏è Missing core directory: $dir"
            fi
          done
          
      - name: Check for Forbidden Dependencies
        run: |
          echo "üîç Checking for forbidden marketing dependencies..."
          
          # Check package.json for marketing-specific dependencies
          if [ -f "app/frontend/package.json" ]; then
            MARKETING_DEPS=("marketing-automation" "lead-generation" "conversion-tracking")
            
            for dep in "${MARKETING_DEPS[@]}"; do
              if grep -q "$dep" app/frontend/package.json; then
                echo "‚ö†Ô∏è Marketing-specific dependency detected: $dep"
                echo "üí° Consider moving to marketing-website repository"
              fi
            done
          fi
          
      - name: Validate Proper Imports
        run: |
          echo "üì¶ Checking import patterns..."
          
          # Check for cross-repository imports (forbidden)
          if grep -r "from.*marketing-website" app/ --include="*.ts" --include="*.tsx"; then
            echo "‚ùå VIOLATION: Cross-repository imports detected"
            echo "üîí Use copy pattern instead of importing from marketing website"
            exit 1
          else
            echo "‚úÖ No cross-repository imports found"
          fi
          
          # Check for proper core app imports
          if grep -r "from.*components/core" app/frontend --include="*.ts" --include="*.tsx"; then
            echo "‚úÖ Core app component imports found"
          fi

  documentation-compliance:
    name: üìö Documentation Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Required Documentation Updates
        run: |
          echo "üìö Checking documentation compliance..."
          
          # Check if component documentation exists
          if [ -f "app/frontend/docs/COMPONENT_SYSTEM.md" ]; then
            echo "‚úÖ Component system documentation exists"
          else
            echo "‚ö†Ô∏è Missing component system documentation"
          fi
          
          if [ -f "app/frontend/docs/AGENT_HANDOFF.md" ]; then
            echo "‚úÖ Agent handoff documentation exists"
          else
            echo "‚ö†Ô∏è Missing agent handoff documentation" 
          fi
          
      - name: Verify Architecture Documentation
        run: |
          echo "üèóÔ∏è Checking architecture documentation..."
          
          REQUIRED_DOCS=(
            "PM33_DATA_REQUIREMENTS_ARCHITECTURE.md"
            "PM33_MULTI_TENANCY_ARCHITECTURE.md"
            "PM33_DESIGN_CONTRACT.md"
            "PM33_UX_WORKFLOW_CONTRACT.md"
          )
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ Architecture doc exists: $doc"
            else
              echo "‚ö†Ô∏è Missing architecture doc: $doc"
            fi
          done

  separation-success:
    name: ‚úÖ Separation Rules Validation Complete
    runs-on: ubuntu-latest
    needs: [enforce-separation-rules, validate-copy-pattern, check-architecture-compliance, documentation-compliance]
    if: always() && needs.enforce-separation-rules.result == 'success'
    steps:
      - name: Separation Compliance Confirmed
        run: |
          echo "‚úÖ PM33 REPOSITORY SEPARATION: VALIDATED"
          echo ""
          echo "üîí SEPARATION RULES ENFORCED:"
          echo "   ‚úÖ No unauthorized marketing website modifications"
          echo "   ‚úÖ Copy pattern compliance verified"
          echo "   ‚úÖ Core app architecture maintained"
          echo "   ‚úÖ Proper import patterns confirmed"
          echo ""
          echo "üèóÔ∏è ARCHITECTURE INTEGRITY:"
          echo "   ‚úÖ Core app independence maintained"
          echo "   ‚úÖ Marketing website boundary respected"
          echo "   ‚úÖ Cross-repository contamination prevented"
          echo ""
          echo "üéØ BUSINESS IMPACT:"
          echo "   ‚úÖ Clean separation enables independent scaling"
          echo "   ‚úÖ Core app focus on PMO transformation preserved"
          echo "   ‚úÖ Marketing optimization can proceed independently"
          echo "   ‚úÖ $100K MRR target supported through proper separation"
          echo ""
          echo "üöÄ Ready for deployment with architectural integrity maintained"